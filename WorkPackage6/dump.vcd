$date
	Mon Nov  1 19:32:49 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_reg_mem $end
$var wire 8 ! data_out [7:0] $end
$var reg 5 " addr [4:0] $end
$var reg 1 # clk $end
$var reg 8 $ data_in [7:0] $end
$var reg 1 % wen $end
$scope module RM $end
$var wire 5 & addr [4:0] $end
$var wire 1 # clk $end
$var wire 8 ' data_in [7:0] $end
$var wire 1 % wen $end
$var reg 8 ( data_out [7:0] $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ) i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 * i [31:0] $end
$upscope $end
$upscope $end
$scope module tb_simple_CPU $end
$var reg 1 + clk $end
$var reg 20 , instruction [19:0] $end
$var reg 1 - rst $end
$scope module SCPU_DUT $end
$var wire 5 . addr_i [4:0] $end
$var wire 1 + clk $end
$var wire 8 / data_in_i [7:0] $end
$var wire 20 0 instruction [19:0] $end
$var wire 8 1 operand_a_i [7:0] $end
$var wire 1 - rst $end
$var wire 1 2 wen_i $end
$var wire 1 3 sel3_i $end
$var wire 1 4 sel1_i $end
$var wire 8 5 result2_i [7:0] $end
$var wire 8 6 result1_i [7:0] $end
$var wire 8 7 operand_b_i [7:0] $end
$var wire 8 8 operand_2_i [7:0] $end
$var wire 8 9 operand_1_i [7:0] $end
$var wire 4 : opcode_i [3:0] $end
$var wire 8 ; offset_i [7:0] $end
$var wire 8 < data_out_i [7:0] $end
$scope module CU1 $end
$var wire 1 + clk $end
$var wire 20 = instr [19:0] $end
$var wire 8 > result2 [7:0] $end
$var wire 1 - rst $end
$var reg 20 ? instruction [19:0] $end
$var reg 8 @ offset [7:0] $end
$var reg 4 A opcode [3:0] $end
$var reg 8 B operand1 [7:0] $end
$var reg 8 C operand2 [7:0] $end
$var reg 1 4 sel1 $end
$var reg 1 3 sel3 $end
$var reg 4 D state [3:0] $end
$var reg 1 2 w_r $end
$upscope $end
$scope module alu1 $end
$var wire 1 + clk $end
$var wire 4 E opcode [3:0] $end
$var wire 8 F operand_a [7:0] $end
$var wire 8 G operand_b [7:0] $end
$var reg 8 H result [7:0] $end
$upscope $end
$scope module data_memory $end
$var wire 5 I addr [4:0] $end
$var wire 1 + clk $end
$var wire 8 J data_in [7:0] $end
$var wire 1 2 wen $end
$var reg 8 K data_out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx K
bx J
bz I
bx H
bx G
bx F
b1111 E
b0 D
bx C
bx B
b1111 A
bx @
b0 ?
bx >
b0 =
bx <
bx ;
b1111 :
bx 9
bx 8
bx 7
bx 6
bx 5
04
03
02
bx 1
b0 0
bx /
bz .
1-
b0 ,
1+
b0 *
b1010 )
bx (
b1010 '
b1100 &
1%
b1010 $
0#
b1100 "
bx !
$end
#1000
0+
1#
#2000
1+
b1101 "
b1101 &
b1011 $
b1011 '
b1011 )
0#
#3000
0-
0+
1#
#4000
1+
b1110 "
b1110 &
b1100 $
b1100 '
b1100 )
0#
#5000
b1000111000000000000 ,
b1000111000000000000 0
b1000111000000000000 =
0+
1#
#6000
b1 D
b1000111000000000000 ?
1+
b1111 "
b1111 &
b1101 $
b1101 '
b1101 )
0#
#7000
0+
1#
#8000
b11 7
b11 G
14
b0 :
b0 A
b0 E
b0 ;
b0 @
b11 /
b11 J
b11 8
b11 C
b1 1
b1 F
b1 9
b1 B
b10 D
1+
b10000 "
b10000 &
b1110 $
b1110 '
b1110 )
0#
#9000
b0 !
b0 (
0+
1#
#10000
b100 5
b100 >
b100 6
b100 H
b11 /
b11 J
b11 8
b11 C
b1 1
b1 F
b1 9
b1 B
b1000 D
1+
b10001 "
b10001 &
b1111 $
b1111 '
b1111 )
0#
#11000
0+
1#
#12000
b11 /
b11 J
b11 8
b11 C
b1 1
b1 F
b1 9
b1 B
b1 D
1+
b10010 "
b10010 &
b10000 $
b10000 '
b10000 )
0#
#13000
b1010011000000000000 ,
b1010011000000000000 0
b1010011000000000000 =
0+
1#
#14000
b11 /
b11 J
b11 8
b11 C
b100 1
b100 F
b100 9
b100 B
b10 D
b1010011000000000000 ?
1+
b10011 "
b10011 &
b10001 $
b10001 '
b10001 )
0#
#15000
0+
1#
#16000
b111 5
b111 >
b111 6
b111 H
b1000 D
1+
b10100 "
b10100 &
b10010 $
b10010 '
b10010 )
0#
#17000
0+
1#
#18000
b1 D
1+
b10101 "
b10101 &
b10011 $
b10011 '
b10011 )
0#
#19000
b1110010000000000001 ,
b1110010000000000001 0
b1110010000000000001 =
0+
1#
#20000
b10 7
b10 G
b1 :
b1 A
b1 E
b10 /
b10 J
b10 8
b10 C
b10 D
b1110010000000000001 ?
1+
b10110 "
b10110 &
b10100 $
b10100 '
b10100 )
0#
#21000
0+
1#
#22000
b10 5
b10 >
b10 6
b10 H
b1000 D
1+
b10111 "
b10111 &
b10101 $
b10101 '
b10101 )
0#
#23000
0+
1#
#24000
b1 D
1+
b11000 "
b11000 &
b10110 $
b10110 '
b10110 )
0#
#25000
b11011000000011110000 ,
b11011000000011110000 0
b11011000000011110000 =
0+
1#
#26000
bx 5
bx >
b1111 7
b1111 G
13
04
b0 :
b0 A
b0 E
b1111 ;
b1111 @
b111 /
b111 J
b111 8
b111 C
b10 1
b10 F
b10 9
b10 B
b10 D
b11011000000011110000 ?
1+
b11001 "
b11001 &
b10111 $
b10111 '
b10111 )
0#
#27000
0+
1#
#28000
b10001 6
b10001 H
12
b100 D
1+
b11010 "
b11010 &
b11000 $
b11000 '
b11000 )
0#
#29000
0+
1#
#30000
02
b1 D
1+
b11011 "
b11011 &
b11001 $
b11001 '
b11001 )
0#
#31000
b11001100000101100000 ,
b11001100000101100000 0
b11001100000101100000 =
0+
1#
#32000
b10110 7
b10110 G
b10110 ;
b10110 @
b100 /
b100 J
b100 8
b100 C
b10 D
b11001100000101100000 ?
1+
b11100 "
b11100 &
b11010 $
b11010 '
b11010 )
0#
#33000
0+
1#
#34000
12
b11000 6
b11000 H
b100 D
1+
b11101 "
b11101 &
b11011 $
b11011 '
b11011 )
0#
#35000
0+
1#
#36000
02
b1 D
1+
b11110 "
b11110 &
b11100 $
b11100 '
b11100 )
0#
#37000
b10111000000011110000 ,
b10111000000011110000 0
b10111000000011110000 =
0+
1#
#38000
b1111 7
b1111 G
b1111 ;
b1111 @
b10 /
b10 J
b10 8
b10 C
bx <
bx K
b10 D
b10111000000011110000 ?
1+
b11111 "
b11111 &
b11101 $
b11101 '
b11101 )
0#
#39000
0+
1#
#40000
b10001 6
b10001 H
b100 D
1+
b0 "
b0 &
b11110 $
b11110 '
b11110 )
0#
#41000
0+
1#
#42000
b1000 D
1+
b1 "
b1 &
b11111 $
b11111 '
b11111 )
0#
#43000
0+
1#
#44000
bx <
bx K
b1 D
1+
b10 "
b10 &
b100000 $
b100000 '
b100000 )
0#
#45000
1#
#46000
b11 "
b11 &
b100001 $
b100001 '
b100001 )
0#
#47000
1#
#48000
b100 "
b100 &
b100010 $
b100010 '
b100010 )
0#
#49000
1#
#50000
b101 "
b101 &
b100011 $
b100011 '
b100011 )
0#
#51000
1#
#52000
b110 "
b110 &
b100100 $
b100100 '
b100100 )
0#
#53000
1#
#54000
b111 "
b111 &
b100101 $
b100101 '
b100101 )
0#
#55000
1#
#56000
b1000 "
b1000 &
b100110 $
b100110 '
b100110 )
0#
#57000
1#
#58000
b1001 "
b1001 &
b100111 $
b100111 '
b100111 )
0#
#59000
1#
#60000
b1010 "
b1010 &
b101000 $
b101000 '
b101000 )
0#
#61000
1#
#62000
b1011 "
b1011 &
b101001 $
b101001 '
b101001 )
0#
#63000
1#
#64000
b1100 "
b1100 &
b101010 $
b101010 '
b101010 )
0#
#65000
1#
#66000
0%
b101011 )
0#
#67000
b1010 $
b1010 '
b1010 *
#68000
b101010 !
b101010 (
1#
#69000
b0 !
b0 (
b1101 "
b1101 &
b1011 $
b1011 '
b1011 *
0#
#70000
b1011 !
b1011 (
1#
#71000
b0 !
b0 (
b1110 "
b1110 &
b1100 $
b1100 '
b1100 *
0#
#72000
b1100 !
b1100 (
1#
#73000
b0 !
b0 (
b1111 "
b1111 &
b1101 $
b1101 '
b1101 *
0#
#74000
b1101 !
b1101 (
1#
#75000
b10000 "
b10000 &
b1110 $
b1110 '
b1110 *
0#
#76000
b1110 !
b1110 (
1#
#77000
b10001 "
b10001 &
b1111 $
b1111 '
b1111 *
0#
#78000
b1111 !
b1111 (
1#
#79000
b10010 "
b10010 &
b10000 $
b10000 '
b10000 *
0#
#80000
b10000 !
b10000 (
1#
#81000
b10011 "
b10011 &
b10001 $
b10001 '
b10001 *
0#
#82000
b10001 !
b10001 (
1#
#83000
b10100 "
b10100 &
b10010 $
b10010 '
b10010 *
0#
#84000
b10010 !
b10010 (
1#
#85000
b10101 "
b10101 &
b10011 $
b10011 '
b10011 *
0#
#86000
b10011 !
b10011 (
1#
#87000
b10110 "
b10110 &
b10100 $
b10100 '
b10100 *
0#
#88000
b10100 !
b10100 (
1#
#89000
b10111 "
b10111 &
b10101 $
b10101 '
b10101 *
0#
#90000
b10101 !
b10101 (
1#
#91000
b11000 "
b11000 &
b10110 $
b10110 '
b10110 *
0#
#92000
b10110 !
b10110 (
1#
#93000
b11001 "
b11001 &
b10111 $
b10111 '
b10111 *
0#
#94000
b10111 !
b10111 (
1#
#95000
b11010 "
b11010 &
b11000 $
b11000 '
b11000 *
0#
#96000
b11000 !
b11000 (
1#
#97000
b11011 "
b11011 &
b11001 $
b11001 '
b11001 *
0#
#98000
b11001 !
b11001 (
1#
#99000
b11100 "
b11100 &
b11010 $
b11010 '
b11010 *
0#
#100000
b11010 !
b11010 (
1#
#101000
b11101 "
b11101 &
b11011 $
b11011 '
b11011 *
0#
#102000
b11011 !
b11011 (
1#
#103000
b11110 "
b11110 &
b11100 $
b11100 '
b11100 *
0#
#104000
b11100 !
b11100 (
1#
#105000
b11111 "
b11111 &
b11101 $
b11101 '
b11101 *
0#
#106000
b11101 !
b11101 (
1#
#107000
b0 "
b0 &
b11110 $
b11110 '
b11110 *
0#
#108000
b11110 !
b11110 (
1#
#109000
b1 "
b1 &
b11111 $
b11111 '
b11111 *
0#
#110000
b11111 !
b11111 (
1#
#111000
b10 "
b10 &
b100000 $
b100000 '
b100000 *
0#
#112000
b100000 !
b100000 (
1#
#113000
b11 "
b11 &
b100001 $
b100001 '
b100001 *
0#
#114000
b100001 !
b100001 (
1#
#115000
b100 "
b100 &
b100010 $
b100010 '
b100010 *
0#
#116000
b100010 !
b100010 (
1#
#117000
b101 "
b101 &
b100011 $
b100011 '
b100011 *
0#
#118000
b100011 !
b100011 (
1#
#119000
b110 "
b110 &
b100100 $
b100100 '
b100100 *
0#
#120000
b100100 !
b100100 (
1#
#121000
b111 "
b111 &
b100101 $
b100101 '
b100101 *
0#
#122000
b100101 !
b100101 (
1#
#123000
b1000 "
b1000 &
b100110 $
b100110 '
b100110 *
0#
#124000
b100110 !
b100110 (
1#
#125000
b1001 "
b1001 &
b100111 $
b100111 '
b100111 *
0#
#126000
b100111 !
b100111 (
1#
#127000
b1010 "
b1010 &
b101000 $
b101000 '
b101000 *
0#
#128000
b101000 !
b101000 (
1#
#129000
b1011 "
b1011 &
b101001 $
b101001 '
b101001 *
0#
#130000
b101001 !
b101001 (
1#
#131000
b1100 "
b1100 &
b101010 $
b101010 '
b101010 *
0#
#132000
b101010 !
b101010 (
1#
#133000
b101011 *
0#
